* Pre-init stuff
** Helper function to add multiple patterns to auto-mode-alist at once

#+BEGIN_SRC emacs-lisp
(defun rh/add-exprs-to-mode (mode expressions)
  "adds EXPRESSIONS to auto-mode-alist for MODE"
  (dolist (expression expressions)
    (add-to-list 'auto-mode-alist `(,expression . ,mode))))

(defun rh/add-exts-to-mode (mode exts)
  "adds EXTENSIONS to auto-mode-alias for MODE"
  (rh/add-exprs-to-mode mode (mapcar (lambda (x) (format "\\.%s\\'" x)) exts)))

(defun rh/add-to-list (list to-add)
  "adds entries in TO-ADD to LIST"
  (unless (consp to-add)
    (error "TO-ADD must be a list"))
  (let ((tgt (symbol-value list)))
    (if tgt
        (setcdr (last tgt) to-add)
      (set list to-add)))
  (symbol-value list))
#+END_SRC

* Package init
** Set up straight.el

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

** Set up `use-package`
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

(defvar local-pkg (expand-file-name "dist-packages" user-emacs-directory))

(add-to-list 'load-path local-pkg)
#+END_SRC

** Define a user var for the `inc` dir beneath `emacs-user-directory`
#+BEGIN_SRC emacs-lisp
(setq user-inc-dir
  (expand-file-name "inc" user-emacs-directory))
#+END_SRC

*** Set encoding system to utf8
This is particularly necessary in order to use auctex due to a dependency upon ~text-jp.el~ which will not load unless this is set as such.
#+BEGIN_SRC emacs-lisp
(setq coding-system-for-read 'utf-8)
(set-language-environment "UTF-8")
#+END_SRC emacs-lisp

* evil
** Load evil
~evil~ is enabled by default. The search module is set to ~evil-search~.
#+BEGIN_SRC emacs-lisp
(use-package undo-fu)

(use-package evil
  :init
  (setq evil-want-keybinding  nil
        evil-want-integration t
        evil-search-module    'evil-search)
  (evil-set-undo-system 'undo-fu))
#+END_SRC

** Load evil-collection
~j~, ~k~, and ~l~ are re-mapped to ~n~, ~e~, and ~o~ for use with the Minimak-12 keyboard layout.
~define-key~ has to be used to fix ~o~ for some reason.
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :requires evil
  :config
  (evil-collection-translate-key nil 'evil-motion-state-map
                                 "n" "j"
                                 "e" "k"
                                 "o" "l"
                                 "l" "o")
  (define-key evil-normal-state-map (kbd "o") 'evil-forward-char)
  (define-key evil-normal-state-map (kbd "C-n") 'evil-ex-search-next)
  ;; Leaving "N" (shifted) as previous match
  (evil-collection-init))
#+END_SRC

** Load evil-leader
This package adds ~<leader>~ support to evil
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :config
  (global-evil-leader-mode)
  (evil-mode 1))
#+END_SRC

** Enable evil

#+BEGIN_SRC emacs-lisp
#+END_SRC emacs-lisp

* Appearance
Set the default font-face to /Source Code Pro/
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (progn
              (add-to-list 'default-frame-alist '(font . "Dank Mono-11"))
              (set-face-attribute 'default t :font "Dank Mono-11" :weight 'medium))))
#+END_SRC

Disable menu bars, tool bar, and most importantly - scroll bars
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (progn
              (toggle-scroll-bar -1)
              (scroll-bar-mode -1)
              (tool-bar-mode -1)
              (menu-bar-mode -1))))

(add-hook 'after-make-frame-functions
          (lambda (frame)
            (modify-frame-parameters frame
                                     '((verticle-scroll-bars   . nil)
                                       (horizontal-scroll-bars . nil)))))
#+END_SRC

Enable line number gutter
#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version)
  (global-display-line-numbers-mode))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
; (require 'robin-hood-theme)
; (use-package forest-blue-theme)

(require 'pine-theme)

(use-package doom-themes
  :straight (doom-themes :type git :host github :repo "RomanHargrave/emacs-doom-themes" :branch "pine")
  :config
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

(add-hook 'after-init-hook
          (lambda ()
            (load-theme 'doom-pine t)))

;; XXX remember to run (all-the-icons-install-fonts)
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode))

(setq frame-resize-pixelwise t)

(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Extensions

** font-lock-studio & rainbow-mode (for face tweaking)
#+BEGIN_SRC emacs-lisp
(use-package font-lock-studio)

;; minor mode for highlighting color codes
(use-package rainbow-mode)
#+END_SRC

** exec-path-from-shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :init
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
  (exec-path-from-shell-copy-env "SSH_AGENT_PID"))
#+END_SRC

** general.el
#+BEGIN_SRC emacs-lisp
(use-package general)
#+END_SRC

** Popwin
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :config
  (popwin-mode 1))
#+END_SRC

** Ivy/Swiper/Counsel
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  (define-key ivy-minibuffer-map (kbd "<tab>") 'ivy-next-line)
  :init
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel)

(use-package counsel-projectile)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (add-hook 'prog-mode-hook #'company-mode)
  (add-hook 'latex-mode-hook #'company-mode)
  :bind
  (:map evil-insert-state-map
        ("C-p" . company-complete))
  (:map company-active-map
        ("RET" . company-complete-selection)))
#+END_SRC

*** Backends
#+BEGIN_SRC emacs-lisp
(use-package company-php)
(use-package company-nginx)
(use-package company-ansible)
(use-package company-plsense)
#+END_SRC

** Tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (setf tramp-persistency-file-name
        (concat temporary-file-directory "tramp-" (user-login-name)))
  
  (add-to-list 'tramp-remote-process-environment
               "GIT_AUTHOR_NAME=Roman Hargrave")
  (add-to-list 'tramp-remote-process-environment
               "GIT_AUTHOR_EMAIL=roman@hargrave.info"))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :config
  (treemacs-git-mode 'deferred))

(use-package treemacs-evil
  :after treemacs evil)

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-magit
  :after treemacs magit)
#+END_SRC

** Centaur
Provides tab groups for navigating open buffers
#+BEGIN_SRC emacs-lisp
(use-package centaur-tabs
  :demand
  :config
  (centaur-tabs-group-by-projectile-project)
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-gray-out-icons 'buffer)
  (setq centaur-tabs-style 'bar)
  (setq centaur-tabs-set-modified-marker nil)
  (defun centaur-tabs-hide-tab (n)
    (let ((name (format "%s" n)))
      (or
       (string-prefix-p "*epc" name)
       (string-prefix-p "*Compile-Log*" name)
       (string-prefix-p "magit" name)
       (string-prefix-p "Pfuture" name)
       (string-prefix-p "Treemacs" name)
       (string-prefix-p "*Treemacs" name))))
  :bind
  (:map evil-normal-state-map
        ("g t" . centaur-tabs-forward)
        ("g T" . centaur-tabs-backward)))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
(use-package evil-magit
  :config
  (setq evil-magit-state          'normal
        evil-magit-use-y-for-yank nil)
  (require 'evil-magit))
#+END_SRC

** ggtags

#+BEGIN_SRC emacs-lisp
(use-package ggtags)
#+END_SRC

** delim-kill

#+BEGIN_SRC emacs-lisp
(use-package delim-kill
  :bind (:map evil-normal-state-map ("SPC k d" . delim-kill)))
#+END_SRC

** Corral

#+BEGIN_SRC emacs-lisp
(use-package corral
  :bind (:map evil-insert-state-map
              ("M-9" . corral-parenthesis-backward)
              ("M-0" . corral-parenthesis-forward)
              ("M-[" . corral-brackets-backward)
              ("M-]" . corral-brackets-forward)
              ("M-{" . corral-braces-backward)
              ("M-}" . corral-braces-forward)
              ("M-'" . corral-double-quotes-backward)))
#+END_SRC

** YASnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :straight (yasnippet :type git :host github :repo "joaotavora/yasnippet")
  :config
  (yas-global-mode 1))
#+END_SRC

** EditorConfig Support

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC

** String edit-at-point

#+BEGIN_SRC emacs-lisp
(use-package string-edit)
#+END_SRC

** eterm

#+BEGIN_SRC emacs-lisp
(use-package eterm-256color)

(add-hook 'term-mode-hook #'eterm-256color-mode)
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook ('after-init-hook . #'global-flycheck-mode))
#+END_SRC

** Reddit Mode

#+BEGIN_SRC emacs-lisp
(use-package md4rd
  :config
  (add-hook 'md4rd-mode-hook 'md4rd-indent-all-the-lines)
  (setq md4rd-subs-active
        '(emacs
          scala
          linux
          c_programming)))

#+END_SRC

** Language Support Modes
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode :mode "Dockerfile")
(use-package lua-mode :mode "\\.lua\\'")
(use-package robots-txt-mode :mode "robots.txt")
(use-package fish-mode :mode "\\.fish\\'" :magic "\\#!.+fish\\'")
(use-package apt-sources-list)
(use-package ansible)
(use-package yaml-mode :mode ("\\.yaml\\'" "\\.yml\\'"))
(use-package go-mode :mode ("\\.go\\'"))
(use-package enh-ruby-mode :mode ("\\.rb\\'" "Gemfile" "rackup.ru" "\\.rake\\'"))
(use-package rustic :mode (("\\.rs\\'" . rustic-mode)))
(use-package ebuild-mode :mode "\\.ebuild\\'")
(use-package apache-mode)

(use-package csharp-mode
  :straight (csharp-mode :type git :host github :repo "emacs-csharp/csharp-mode")
  :mode "\\.cs\\'")

(use-package krakatau-mode
  :straight (krakatau-mode :type git :host github :repo "RomanHargrave/krakatau-mode")
  :mode "\\.j\\'")

(use-package cue-mode
  :straight (cue-mode :type git :host github :repo "seblemaguer/cue-mode")
  :mode "\\.cue\\'")

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))

(use-package sql-indent
  :config
  (add-hook 'sql-mode-hook #'sqlind-minor-mode))

(use-package sqlup-mode
  :config
  (add-hook 'sql-mode-hook #'sqlup-mode)
  (rh/add-to-list 'sqlup-blacklist
                  '("public" "date" "id" "plans"
                    "name" "state")))

(rh/add-exts-to-mode 'fortran-mode '(ftn f77))
(rh/add-exts-to-mode 'f90-mode '(f90 f95 f03 f08))

; also get dtrt-indent, to be polite when working with other's code
(use-package dtrt-indent
  :config (dtrt-indent-global-mode 1))

(use-package clojure-mode
  :mode ("\\.clj\\'"))
(use-package cider)
#+END_SRC

*** C

Tweaks to cc-mode, more or less

#+BEGIN_SRC emacs-lisp
(setq c-default-style '((cc-mode . "bsd")
                        (csharp-mode . "csharp"))
      c-basic-offset  2)
#+END_SRC

*** D

#+BEGIN_SRC emacs-lisp
(use-package d-mode
  :defer t
  :mode ("\\.d\\'")
  :config
  (add-hook 'd-mode-hook
            (lambda ()
                    (setq c-basic-offset 2
                          tab-width      2))))

(use-package company-dcd
  :requires company-mode)
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :mode "\\.py\\'"
  :config
  (setq python-shell-interpreter "/usr/bin/python"))
#+END_SRC

*** PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :mode "\\.php\\'"
  :magic "#!.+php$")
(use-package php-refactor-mode
  :config
  (add-hook 'php-mode-hook 'php-refactor-mode))
#+END_SRC

*** CMake
Also includes cmake-ide for clang integration
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
(use-package cmake-ide
                                        ;  :config (cmake-ide-setup)
  )
#+END_SRC

*** TeX
Includes company backends
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t)

(use-package company-auctex
  :after auctex)

(use-package edit-indirect-region-latex)

(use-package latex-pretty-symbols)

(use-package latex-preview-pane)
#+END_SRC

*** coleslaw-mode
This is /sort of/ a language support mode.
#+BEGIN_SRC emacs-lisp
(use-package coleslaw
  :straight (coleslaw :type git :host github :repo "equwal/coleslaw"
                      :fork (:host github :repo "RomanHargrave/coleslaw"))
  :config
  (coleslaw-setup))
#+END_SRC

*** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.tmpl\\'"         . web-mode)
         ("\\.ftl\\'"          . web-mode)
         ("\\.blade\\.php\\'"  . web-mode)
         ("\\.html\\'"         . web-mode)
         ("\\.css\\'"          . web-mode)
         ("\\.tpl\\'"          . web-mode)
         ("\\.vue\\'"          . web-mode)
         ("\\.erb\\'"          . web-mode)
         ("\\.haml\\'"         . web-mode)))

(setq web-mode-engines-alist
      '(("closure"    . "\\.tmpl\\'")
        ("freemarker" . "\\.ftl\\'")))

(defun web-mode-config-hook ()
     "Configuration hook for web-mode"
     (setq web-mode-markup-indent-offset 2))

;; Also configure JS indent
(setq js-indent-level 2)

(add-hook 'web-mode-hook 'web-mode-config-hook)
#+END_SRC

*** cperl-mode & raku-mode
#+BEGIN_SRC emacs-lisp
(use-package cperl-mode
  :defer t
  :config
  (setq cperl-indent-level 3
        cperl-close-paren-offset -3
        cperl-continued-statement-offset 3
        cperl-indent-parens-as-block t))

(defalias 'perl-mode 'cperl-mode)

(use-package raku-mode
  :straight (raku-mode :type git :host github :repo "Raku/raku-mode")
  :mode (("\\.raku\\'" . raku-mode)
         ("\\.t6\\'"   . raku-mode)
         ("\\.pm6\\'"  . raku-mode)
         ("\\.p6\\'"   . raku-mode))
  :magic (("#!.+raku" . raku-mode)
          ("#!.+rakudo" . raku-mode)
          ("#!.+perl6" . raku-mode))
  :config
  (setq raku-indent-offset 3))
#+END_SRC

*** scala-mode
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :mode (("\\.scala\\'" . scala-mode)
         ("\\.sc\\'"    . scala-mode))
  :interpreter
  ("scala" . scala-mode))

(use-package lsp-metals
  :after lsp-mode)

(use-package sbt-mode
  :config
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))

(add-hook 'scala-mode-hook
          (lambda ()
            (setq evil-shift-width 2)))
#+END_SRC

*** Fountain Mode
#+BEGIN_SRC emacs-lisp
(use-package fountain-mode
  :mode ("\\.fountain\\'" "\\.spmd\\'")
  :defer t)
#+END_SRC

*** language server protocol support
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook ((scala-mode    . lsp)
         (php-mode      . lsp)
         (python-mode   . lsp)
         (d-mode        . lsp)
         (perl-mode     . lsp)
         (ruby-mode     . lsp)
         (enh-ruby-mode . lsp)
         (cperl-mode    . lsp))
  :commands lsp
  :init
  :config
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection '("dub" "run" "dls"))
    :major-modes '(d-mode)
    :server-id 'dls))
  (add-to-list 'lsp-language-id-configuration '(d-mode . "d"))
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection '("perl" "-MPerl::LanguageServer" "-e" "Perl::LanguageServer::run"))
    :major-modes '(perl-mode cperl-mode)
    :server-id 'perl-language-server))
  (add-to-list 'lsp-language-id-configuration '(cperl-mode . "perl"))
  (setq lsp-prefer-flymake nil)
  (setq lsp-solargraph-use-bundler t))

(defun lsp-solargraph--build-command ()
    "Build solargraph command (modded)"
    '("fish" "-c" "rvm use && bundle exec solargraph stdio"))

(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024))

(use-package lsp-ui
  :requires lsp-mode flycheck
  :config
  (setq lsp-ui-doc-position 'top
        lsp-ui-flycheck-enable t
        lsp-ui-flycheck-list-position 'right
        lsp-ui-flycheck-live-reporting t))

(general-define-key
 "<f6>" 'lsp-rename
 "<f7>" 'lsp-ui-peek-find-definitions
 "<f8>" 'lsp-ui-peek-find-references)

(general-define-key
 :states 'normal
 "SPC l g g" 'lsp-ui-imenu)

(use-package company-lsp)

(use-package lsp-treemacs)
#+END_SRC

*** NginX mode

#+BEGIN_SRC emacs-lisp
(use-package nginx-mode
  :defer t)
#+END_SRC

** Ctags

#+BEGIN_SRC emacs-lisp
(use-package ctags-update
  :config
  (setq ctags-update-command "/usr/bin/ctags"))

;; do not ask about loading TAGS when ctags-update changes it
(setq tags-revert-without-query 1)

(use-package tags-tree)

(defun regenerate-tags ()
  (interactive)
  (let ((tags-directory (directory-file-name (projectile-project-root)))
        (tags-file (expand-file-name "TAGS" projectile-project-root)))
    (shell-command
     (format "/usr/bin/ctags -f %s -e -R %s" tags-file tags-directory))))
#+END_SRC

* Configuration

** Editor Behaviour
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-stop-list '(3 6))
(setq-default tab-with 3)
(setq-default standard-indent 3)

(setq scroll-step                    1
      scroll-margin                  9
      scroll-conservatively          10000
      mouse-wheel-scroll-amount      '(1 ((shift) . 1))
      mouse-whell-progressive-speed  nil
      mouse-whell-follow-mouse       't
      version-control                t
      vc-make-backup-files           t
      vc-follow-symlinks             t
      coding-system-for-read         'utf-8
      coding-system-for-write        'utf-8
      sentence-end-double-space      nil
      auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))
      backup-directory-alist         `(("." . "~/.emacs.d/backups"))
      delete-old-versions            -1
      custom-file                    "~/.emacs.d/custom.el")

(show-paren-mode 1)
#+END_SRC

*** Tab-character highlighting
#+BEGIN_SRC emacs-lisp
(defface whitespace-indent-face
  '((t (:background "color-236")))
  "Highlights non-space indentation")

(defvar computed-indent-chars
  '(("\t" . 'whitespace-indent-face)))

(add-hook 'fortran-mode-hook
          (lambda () (font-lock-add-keywords nil computed-indent-chars)))
#+END_SRC

*** Fix org-mode source-editor indentation
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

Fix word-skip behaviour
#+BEGIN_SRC emacs-lisp
(modify-syntax-entry ?_ "w")
#+END_SRC

** Keybindings

** Stateless Global Keybindings
#+BEGIN_SRC emacs-lisp
(general-define-key
 "C-s"   'save-buffer)

(evil-leader/set-key
  "z" 'eval-expression)
#+END_SRC

** Normal mode keybindings
*** Global
#+BEGIN_SRC emacs-lisp
(general-define-key
 :states 'normal
 :prefix "C-w"
 "<up>"    'evil-window-up
 "e"       'evil-window-up
 "<down>"  'evil-window-down
 "n"       'evil-window-down
 "<left>"  'evil-window-left
 "h"       'evil-window-left
 "<right>" 'evil-window-right
 "o"       'evil-window-right)

(general-define-key
 :states 'normal
 :prefix "SPC"
 "c f f" 'counsel-find-file
 "d t p" 'describe-text-properties
 "d t w" 'delete-trailing-whitespace
 "t m t" 'treemacs
 "t m o" 'treemacs-select-window
 "t f n" 'treemacs-create-file
 "t d n" 'treemacs-create-dir
 "t t l" 'toggle-truncate-lines
 "f c c" 'flycheck-clear
 "f e x" 'eval-buffer
 "g c c" 'magit-commit-create
 "g c a" 'magit-commit-amend
 "g c e" 'magit-commit-extend
 "g c r" 'magit-commit-reword
 "g a a" 'magit-stage
 "g a m" 'magit-stage-modified
 "g r s" 'magit-unstage-file
 "g r a" 'magit-unstage-all
 "g s t" 'magit-status
 "g d d" 'magit-diff-unstaged
 "g d s" 'magit-diff-staged
 "g d f" 'magit-diff-buffer-file
 "g p p" 'magit-push-to-remote
 "g p r" 'magit-push-refspecs
 "g l l" 'magit-log
 "g l f" 'magit-log-buffer-file
 "i s b" 'counsel-switch-buffer
 "c s b" 'counsel-switch-buffer)


#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
;; treemacs-mode bindings
(general-define-key
 :keymaps    'treemacs-mode-map
 "C-c"       'treemacs
 "r"         'treemacs-visit-node-in-most-recently-used-window
 "R"         'treemacs-refresh)

;; because once was not enough
(general-define-key
 :keymaps 'treemacs-mode-map
 :prefix "C-w"
 "q"       'treemacs-close
 "<up>"    'evil-window-up
 "e"       'evil-window-up
 "<down>"  'evil-window-down
 "n"       'evil-window-down
 "<left>"  'evil-window-left
 "h"       'evil-window-left
 "<right>" 'evil-window-right
 "o"       'evil-window-right)
#+END_SRC

*** Tetris
#+BEGIN_SRC emacs-lisp
(general-define-key
 :keymaps 'tetris-mode-map
 "a" 'tetris-move-left
 "t" 'tetris-move-right
 "s" 'tetris-move-down
 "l" 'tetris-rotate-next
 "e" 'tetris-rotate-prev
 "p" 'tetris-pause)
#+END_SRC

* Final Steps

** Load Custom Settings

Custom settings include things such as whitelisted dir-local/local vars

#+BEGIN_SRC emacs-lisp
(load-file
 (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
