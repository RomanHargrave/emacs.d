#+STARTUP: showeverything

* Pre-init stuff
** Helper function to add multiple patterns to auto-mode-alist at once

   #+BEGIN_SRC emacs-lisp
   (defun rh/add-exprs-to-mode (mode expressions)
     "adds EXPRESSIONS to auto-mode-alist for MODE"
     (dolist (expression expressions)
       (add-to-list 'auto-mode-alist `(,expression . ,mode))))

   (defun rh/add-exts-to-mode (mode exts)
     "adds EXTENSIONS to auto-mode-alias for MODE"
     (rh/add-exprs-to-mode mode (mapcar (lambda (x) (format "\\.%s\\'" x)) exts)))

   (defun rh/add-to-list (list to-add)
     "adds entries in TO-ADD to LIST"
     (unless (consp to-add)
       (error "TO-ADD must be a list"))
     (let ((tgt (symbol-value list)))
       (if tgt
           (setcdr (last tgt) to-add)
         (set list to-add)))
     (symbol-value list))

   (defsubst rh/car-equal (l r)
     "Compares the `car's of L and R using `equal'"
     (equal (car l) (car r)))
   #+END_SRC

* Emacs Basics
** Package management

   #+BEGIN_SRC emacs-lisp
   (defvar bootstrap-version)
   (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
         (goto-char (point-max))
         (eval-print-last-sexp)))
     (load bootstrap-file nil 'nomessage))

   (straight-use-package 'use-package)
   (setq straight-use-package-by-default t)

   (defvar local-pkg (expand-file-name "dist-packages" user-emacs-directory))

   (add-to-list 'load-path local-pkg)

   (setq use-package-hook-name-suffix nil)
   #+END_SRC

** Base behaviour

   #+BEGIN_SRC emacs-lisp
   (setq user-inc-dir
         (expand-file-name "inc" user-emacs-directory))

   ;; set encoding system to UTF-8 to prevent issues with auctex
   (setq coding-system-for-read 'utf-8)
   (set-language-environment "UTF-8")

   ;; unfortunately we can't put lockfiles elsewhere for now, and these fuck up everything.
   (setq create-lockfiles nil)

   (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
   (load-file custom-file)
   #+END_SRC

** Remove undesirable keyboard behavior

   #+BEGIN_SRC emacs-lisp
   (dolist (fk  (number-sequence 1 24))
     (global-unset-key (kbd (concat "<f" (number-to-string fk) ">"))))

   (dolist (key '("C-t" "C-x m"))
     (global-unset-key (kbd key)))
   #+END_SRC

* Appearance
  Set the default font-face to /Source Code Pro/ and more
  #+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (progn
                (add-to-list 'default-frame-alist '(font . "IBM Plex Mono-10"))
                (set-face-attribute 'default t :font "IBM Plex Mono-10" :weight 'normal))))

  (setq jit-lock-stealth-time 30)

                                          ; show columns
  (setq column-number-mode 1)
  #+END_SRC

  Disable menu bars, tool bar, and most importantly - scroll bars
  #+BEGIN_SRC emacs-lisp
  (defun rh/setup-frame (frame)
    "Configure a normal frame."
    (modify-frame-parameters frame '((vertical-scroll-bars . nil)
                                     (horizontal-scroll-bars . nil)
                                     (alpha . 96)))
    ;; text-mode only stuff
    (unless (display-graphic-p (selected-frame))
      (set-face-background 'default "unspecified-bg" (selected-frame))))


  (add-hook 'after-make-frame-functions #'rh/setup-frame)

  (defun rh/after-init ()
    "Run after emacs init."
    (toggle-scroll-bar -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (load-theme 'doom-pine t))

  (add-hook 'after-init-hook #'rh/after-init)

  #+END_SRC

** Things that need to be installed before anything else
These items include packages that MUST be built before the built-in version can be loaded.

*** Org-mode + Org-roam
    #+BEGIN_SRC emacs-lisp
    ;(use-package org
    ;  :straight (:build t))

    ;; XXX: org-directory is set with custom for system-local stuff the
    ;; same goes for org-roam-directory
    ; (use-package org-roam
    ;  :init
    ;  (setq org-roam-v2-ack t)
    ;  :bind* (("C-x C-n f" . org-roam-node-find)
    ;          ("C-x C-n i" . org-roam-node-insert)
    ;          ("C-x C-n c" . org-roam-node-capture))
    ;  :config
    ;  (org-roam-db-autosync-mode)
    ;  (push '("e" "encrypted" plain "%?"
    ;          :target (file+head "${slug}.org.gpg"
    ;                             "#+title: ${title}\n")
    ;          :unnarrowed t)
    ;        org-roam-capture-templates))

    (setq org-edit-src-content-indentation 0)
    #+END_SRC


** Theme and UI customizations
   #+BEGIN_SRC emacs-lisp
   (global-display-line-numbers-mode)

   (use-package doom-themes
     :straight (doom-themes :type git :host github :repo "RomanHargrave/emacs-doom-themes" :branch "pine")
     :config
     (doom-themes-org-config))

   (defun rh/load-theme ()
     "Load desired theme."
     (load-theme 'doom-pine t))

   (add-hook 'after-init-hook #'rh/load-theme)

   ;; XXX remember to run (all-the-icons-install-fonts)

   (use-package minions
     :config
     (minions-mode 1))

   (use-package doom-modeline
     :hook
     (after-init-hook . doom-modeline-mode)
     (after-make-frame-functions . (lambda (frame) (setq doom-modeline-icon t)))
     :config

     ;; just going to spin my own buffer-position
     (doom-modeline-def-segment rh/point
       "Displays absolute location of point."
       (concat
        (doom-modeline-spc)
        (propertize
         (number-to-string (point))
         'face (if (doom-modeline--active)
                   'mode-line
                 'mode-line-inactive))
        (doom-modeline-spc)))

     (doom-modeline-def-segment buffer-position
       (let* ((face   (if (doom-modeline--active)
                          'mode-line
                        'mode-line-inactive)))
         (concat
          (doom-modeline-spc)

          (propertize (concat (format-mode-line '("%4l:%2c"))
                              " (" (number-to-string (point)) ")")
                      'face face)

          (doom-modeline-spc))))

     (customize-set-variable 'doom-modeline-minor-modes t)
     (customize-set-variable 'doom-modeline-enable-word-count t)

     ;; i'm going to replace the main modeline because i'm that person
     (doom-modeline-def-modeline 'main
       '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
       '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))

     (doom-modeline-def-modeline 'minimal
       '(bar matches buffer-info-simple)
       '(media-info major-mode))

     (doom-modeline-def-modeline 'special
       '(bar window-number modals matches buffer-info buffer-position word-count parrot selection-info)
       '(objed-state misc-info battery irc-buffers debug minor-modes input-method indent-info buffer-encoding major-mode process))

     (doom-modeline-def-modeline 'project
       '(bar window-number buffer-default-directory)
       '(misc-info battery irc mu4e gnus github debug minor-modes input-method major-mode process))

     (doom-modeline-def-modeline 'dashboard
       '(bar window-number buffer-default-directory-simple)
       '(misc-info battery irc mu4e gnus github debug minor-modes input-method major-mode process))

     (doom-modeline-def-modeline 'vcs
       '(bar window-number modals matches buffer-info buffer-position parrot selection-info)
       '(misc-info battery irc mu4e gnus github debug minor-modes buffer-encoding major-mode process))

     (doom-modeline-def-modeline 'package
       '(bar window-number package)
       '(misc-info major-mode process))

     (doom-modeline-def-modeline 'info
       '(bar window-number buffer-info info-nodes buffer-position parrot selection-info)
       '(misc-info buffer-encoding major-mode))

     (doom-modeline-def-modeline 'media
       '(bar window-number buffer-size buffer-info)
       '(misc-info media-info major-mode process vcs))

     (doom-modeline-def-modeline 'message
       '(bar window-number modals matches buffer-info-simple buffer-position word-count parrot selection-info)
       '(objed-state misc-info battery debug minor-modes input-method indent-info buffer-encoding major-mode))

     (doom-modeline-def-modeline 'pdf
       '(bar window-number matches buffer-info pdf-pages)
       '(misc-info major-mode process vcs))

     (doom-modeline-def-modeline 'org-src
       '(bar window-number modals matches buffer-info-simple buffer-position word-count parrot selection-info)
       '(objed-state misc-info debug lsp minor-modes input-method indent-info buffer-encoding major-mode process checker))

     (doom-modeline-def-modeline 'timemachine
       '(bar window-number matches git-timemachine buffer-position word-count parrot selection-info)
       '(misc-info minor-modes indent-info buffer-encoding major-mode)))

   (setq frame-resize-pixelwise t)

   (use-package rainbow-delimiters
     :config
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

   ;; A E S T H E T I C

   (set-face-background 'menu "aquamarine4")
   #+END_SRC

* Extensions

** font-lock-studio & rainbow-mode (for face tweaking)
   #+BEGIN_SRC emacs-lisp
   (use-package font-lock-studio)

   ;; minor mode for highlighting color codes
   (use-package rainbow-mode)
   #+END_SRC

** exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :init
     (exec-path-from-shell-initialize)
     (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
     (exec-path-from-shell-copy-env "SSH_AGENT_PID"))
   #+END_SRC

** general.el
   #+BEGIN_SRC emacs-lisp
   (use-package general)
   #+END_SRC

** Shackle
   Shackle makes popups manageable
   #+BEGIN_SRC emacs-lisp
   ;; Inspired by Dale Sedevic's `my:pop-up-buffer-p'
   (defun rh/is-popup-buffer (&optional buffer)
     "Is BUFFER a pop-up buffer?"
     (with-current-buffer (or buffer (current-buffer))
       (derived-mode-p 'compilation-mode
                       'epa-key-list-mode
                       'help-mode)))

   (defvar rh/shackle-defaults
     '(:popup t :align below :size 0.2))

   (use-package shackle
     :config
     (shackle-mode 1)
     (setq shackle-rules
           `(('("*Help*" "*General Keybindings*" "*Flycheck errors*" "*Apropos*") ,@rh/shackle-defaults :select t)
             ('(:custom rh/is-popup-buffer) ,@rh/shackle-defaults))))

   #+END_SRC

** Window management
   #+BEGIN_SRC emacs-lisp
   (use-package winum
     :config
     ;; no, i don't want it. don't force keybindings on your users.
     ;; especially keybindings this shallow. that's my job, fuck off.
     (define-key winum-keymap (kbd "C-x w") nil)
     (winum-mode 1))

   (defun rh--kill-winum (number)
     "Kill window using positive number."
     (interactive "nWindow: ")
     (winum-select-window-by-number (- number)))

   ;; you'll probably hate me, but it's how my window management works,
   ;; so this is great. t has the effect of being instant.
   (setq mouse-autoselect-window t)

   (general-define-key
    "C-c w w" 'winum-select-window-by-number
    "C-c w d" 'rh--kill-winum
    "C-c w q" 'delete-window
    "C-x o"   'ace-window)
   #+END_SRC

** Ivy/Swiper/Counsel
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :config
     (setq ivy-use-virtual-buffers t)
     (setq ivy-wrap t)
     (define-key ivy-minibuffer-map (kbd "<tab>") 'ivy-next-line)
     :init
     (ivy-mode 1))

   (use-package counsel)

                                           ;(use-package ivy-rich
                                           ;  :after counsel
                                           ;  :init
                                           ;  (ivy-rich-mode 1))

   (use-package counsel-projectile)
   #+END_SRC

** Tramp
   #+BEGIN_SRC emacs-lisp
   (use-package tramp
     :straight (:build t :pre-build (("make" "autoloads")))
     :config
     (setf tramp-persistency-file-name
           (concat temporary-file-directory "tramp-" (user-login-name))))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :config
     (projectile-mode 1))
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :config
     (setq magit-save-repository-buffers 'dontask))
   #+END_SRC

** ggtags

   #+BEGIN_SRC emacs-lisp
   (use-package ggtags)
   #+END_SRC

** Edit Server
   #+BEGIN_SRC emacs-lisp
   (use-package edit-server)
   (edit-server-start)
   #+END_SRC
** Corral

   #+BEGIN_SRC emacs-lisp
   (use-package corral)
   #+END_SRC

** YASnippet

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :straight (yasnippet :type git :host github :repo "joaotavora/yasnippet")
     :config
     (yas-global-mode 1))
   #+END_SRC

** EditorConfig Support

   #+BEGIN_SRC emacs-lisp
   (use-package editorconfig
     :config
     (editorconfig-mode 1))
   #+END_SRC

** String edit-at-point

   #+BEGIN_SRC emacs-lisp
   (use-package string-edit)
   #+END_SRC

** eterm

   #+BEGIN_SRC emacs-lisp
   (use-package eterm-256color)

   (add-hook 'term-mode-hook #'eterm-256color-mode)
   #+END_SRC

** Flycheck

   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     ;;  :hook ((after-init . #'global-flycheck-mode))
     )
   (use-package flycheck-raku
     :straight (flycheck-raku :type git :host github :repo "Raku/flycheck-raku"))
   #+END_SRC

*** Deadgrep/Ripgrep

    #+BEGIN_SRC emacs-lisp
    (use-package deadgrep
      :bind ("<f5>" . deadgrep))
    #+END_SRC

*** language server protocol support, company
    #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :hook ((scala-mode-hook    . lsp)
             (php-mode-hook      . lsp)
             (python-mode-hook   . lsp)
             (d-mode-hook        . lsp)
             (perl-mode-hook     . lsp)
             (ruby-mode-hook     . lsp)
             (enh-ruby-mode-hook . lsp)
             (cperl-mode-hook    . lsp))
      :commands lsp
      :init
      :config
      (lsp-register-client
       (make-lsp-client
        :new-connection (lsp-stdio-connection '("dub" "run" "dls"))
        :major-modes '(d-mode)
        :server-id 'dls))
      (add-to-list 'lsp-language-id-configuration '(d-mode . "d"))
      (lsp-register-client
       (make-lsp-client
        :new-connection (lsp-stdio-connection '("perl" "-MPerl::LanguageServer" "-e" "Perl::LanguageServer::run"))
        :major-modes '(perl-mode cperl-mode)
        :server-id 'perl-language-server))
      (add-to-list 'lsp-language-id-configuration '(cperl-mode . "perl"))
      (setq lsp-prefer-flymake nil)
      (setq lsp-solargraph-use-bundler t)

      (defun lsp-solargraph--build-command ()
        "Build solargraph command (modded)"
        '("fish" "-c" "rvm use && bundle exec solargraph stdio")))

    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024))

    (use-package lsp-ui
      :requires lsp-mode flycheck
      :config
      (setq lsp-ui-doc-mode t
            lsp-ui-doc-show-with-cursor nil
            lsp-ui-doc-show-with-mouse t
            lsp-ui-doc-position 'at-point
            lsp-ui-flycheck-enable t
            lsp-ui-flycheck-list-position 'right
            lsp-ui-flycheck-live-reporting t))

    (general-define-key
     "<f6>" 'lsp-rename
     "<f4>" 'lsp-glance
     "<f7>" 'lsp-ui-peek-find-definitions
     "<f8>" 'lsp-ui-peek-find-references)

    (general-define-key
     :states 'normal
     "SPC l g g" 'lsp-ui-imenu)

    (use-package company
      :config
      (define-key company-mode-map
        [remap indent-for-tab-command] #'company-indent-or-complete-common))

    (use-package company-lsp)
    #+END_SRC

** Language Support Modes
   #+BEGIN_SRC emacs-lisp
   (use-package dockerfile-mode :mode "Dockerfile")
   (use-package lua-mode :mode "\\.lua\\'")
   (use-package robots-txt-mode :mode "robots.txt")
   (use-package fish-mode :mode "\\.fish\\'" :magic "\\#!.+fish\\'")
   (use-package apt-sources-list)
   (use-package ansible)
   (use-package yaml-mode :mode ("\\.yaml\\'" "\\.yml\\'"))
   (use-package go-mode :mode ("\\.go\\'"))
   (use-package enh-ruby-mode :mode ("\\.rb\\'" "Gemfile" "rackup.ru" "\\.rake\\'"))
   (use-package rustic :mode (("\\.rs\\'" . rustic-mode)))
   (use-package ebuild-mode :mode "\\.ebuild\\'")
   (use-package apache-mode)

   (use-package wikitext-mode)

   (use-package ledger-mode
     :config
     (setq ledger-default-date-format ledger-iso-date-format))

   (use-package mediawiki
     :mode ("/tmp/tmp_..\\.wikipedia\\.org_.+" . mediawiki-mode))

   (use-package csharp-mode
     :straight (csharp-mode :type git :host github :repo "emacs-csharp/csharp-mode")
     :mode "\\.cs\\'")

   (use-package krakatau-mode
     :straight (krakatau-mode :type git :host github :repo "RomanHargrave/krakatau-mode")
     :mode "\\.j\\'")

   (use-package cue-mode
     :straight (cue-mode :type git :host github :repo "seblemaguer/cue-mode")
     :mode "\\.cue\\'")

   (use-package markdown-mode
     :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'"       . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
     :init (setq markdown-command "pandoc")
     :config
     (add-hook 'markdown-mode-hook 'auto-fill-mode))

   (use-package sql-indent
     :config
     (add-hook 'sql-mode-hook #'sqlind-minor-mode))

   (use-package sqlup-mode
     :config
     (add-hook 'sql-mode-hook #'sqlup-mode)
     (rh/add-to-list 'sqlup-blacklist
                     '("public" "date" "id" "plans"
                       "name" "state")))

   (rh/add-exts-to-mode 'fortran-mode '(ftn f77))
   (rh/add-exts-to-mode 'f90-mode '(f90 f95 f03 f08))

                                           ; also get dtrt-indent, to be polite when working with other's code
   (use-package dtrt-indent)

   (use-package clojure-mode
     :mode ("\\.clj\\'"))

   (use-package paredit
     :hook
     ((emacs-lisp-mode-hook . paredit-mode)
      (lisp-mode-hook       . paredit-mode)
      (clojure-mode-hook    . paredit-mode)))

   (use-package macrostep)

   (use-package cider :after tramp)

   (setq c-default-style '((cc-mode . "bsd")
                           (csharp-mode . "csharp"))
         c-basic-offset  2)

   (use-package python-mode
     :mode "\\.py\\'"
     :config
     (setq python-shell-interpreter "/usr/bin/python"))

   (use-package cmake-mode
     :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))

   (use-package coleslaw
     :straight (coleslaw :type git :host github :repo "equwal/coleslaw"
                         :fork (:host github :repo "RomanHargrave/coleslaw"))
     :config
     (coleslaw-setup))

   (use-package fountain-mode
     :mode ("\\.fountain\\'" "\\.spmd\\'")
     :defer t)

   (use-package nginx-mode
     :defer t)

   (use-package cucumber
     :mode (("\\.feature\\'" . feature-mode)))

   (use-package json-mode
     :mode ("\\.json\\'"))

   (use-package hierarchy
     :straight (:build t))

   (use-package json-navigator
     :straight (:build t))
   #+END_SRC

*** D

    #+BEGIN_SRC emacs-lisp
    (use-package d-mode
      :defer t
      :mode ("\\.d\\'")
      :config
      (add-hook 'd-mode-hook
                (lambda ()
                  (setq c-basic-offset 2
                        tab-width      2))))

    (use-package company-dcd
      :requires company-mode)
    #+END_SRC

*** PHP
    #+BEGIN_SRC emacs-lisp
    (use-package php-mode
      :mode "\\.php\\'"
      :magic "#!.+php$")
    (use-package php-refactor-mode
      :config
      (add-hook 'php-mode-hook 'php-refactor-mode))
    #+END_SRC

*** TeX
    Includes company backends
    #+BEGIN_SRC emacs-lisp
    (use-package auctex
      :defer t
      :config
      (add-hook 'tex-mode-hook 'auto-fill-mode)
      (add-hook 'latex-mode-hook 'auto-fill-mode))

    (use-package company-auctex
      :after auctex)

    (use-package edit-indirect-region-latex)

    (use-package latex-pretty-symbols)

    (use-package latex-preview-pane)
    #+END_SRC

*** web-mode, Tide
    #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :mode (("\\.tmpl\\'"         . web-mode)
             ("\\.ftl\\'"          . web-mode)
             ("\\.blade\\.php\\'"  . web-mode)
             ("\\.html\\'"         . web-mode)
             ("\\.css\\'"          . web-mode)
             ("\\.tpl\\'"          . web-mode)
             ("\\.vue\\'"          . web-mode)
             ("\\.erb\\'"          . web-mode)
             ("\\.haml\\'"         . web-mode)))

    (setq web-mode-engines-alist
          '(("closure"    . "\\.tmpl\\'")
            ("freemarker" . "\\.ftl\\'")))

    (defun web-mode-config-hook ()
      "Configuration hook for web-mode"
      (setq web-mode-markup-indent-offset 2))

    ;; Also configure JS indent
    (setq js-indent-level 2)

    (add-hook 'web-mode-hook 'web-mode-config-hook)

    (use-package typescript-mode
      :mode (("\\.tsx?\\'" . typescript-mode)))

    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection '("npx" "typescript-language-server" "--stdio"))
      :major-modes '(typescript-mode) ;; todo: maybe add web-mode
      :server-id 'tsserver))
    #+END_SRC

*** cperl-mode & raku-mode
    #+BEGIN_SRC emacs-lisp
    (use-package cperl-mode
      :defer t
      :config
      (setq cperl-indent-level 3
            cperl-close-paren-offset -3
            cperl-continued-statement-offset 3
            cperl-indent-parens-as-block nil))

    (defalias 'perl-mode 'cperl-mode)

    ;;(use-package raku-mode
    ;;  :straight (raku-mode :type git :host github :repo "RomanHargrave/raku-mode")
    ;;  :mode (("\\.raku\\'" . raku-mode)
    ;;         ("\\.t6\\'"   . raku-mode)
    ;;         ("\\.pm6\\'"  . raku-mode)
    ;;         ("\\.p6\\'"   . raku-mode))
    ;;  :magic (("#!.+raku" . raku-mode)
    ;;          ("#!.+rakudo" . raku-mode)
    ;;          ("#!.+perl6" . raku-mode))
    ;;  :config
    ;;  (setq raku-indent-offset 3))
    #+END_SRC

*** scala-mode
    #+BEGIN_SRC emacs-lisp
    (use-package scala-mode
      :mode (("\\.scala\\'" . scala-mode)
             ("\\.sc\\'"    . scala-mode))
      :interpreter
      ("scala" . scala-mode))

    (use-package lsp-metals
      :after lsp-mode)

    (use-package sbt-mode
      :config
      (substitute-key-definition
       'minibuffer-complete-word
       'self-insert-command
       minibuffer-local-completion-map))

    (add-hook 'scala-mode-hook
              (lambda ()
                (setq evil-shift-width 2)))
    #+END_SRC

** Ctags

   #+BEGIN_SRC emacs-lisp
   (use-package ctags-update
     :config
     (setq ctags-update-command "/usr/bin/ctags"))

   ;; do not ask about loading TAGS when ctags-update changes it
   (setq tags-revert-without-query 1)

                                           ; (use-package tags-tree)

   (defun regenerate-tags ()
     (interactive)
     (let ((tags-directory (directory-file-name (projectile-project-root)))
           (tags-file (expand-file-name "TAGS" projectile-project-root)))
       (shell-command
        (format "/usr/bin/ctags -f %s -e -R %s" tags-file tags-directory))))
   #+END_SRC

* Configuration

** Editor Behaviour

   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   (setq-default tab-stop-list '(3 6))
   (setq-default tab-with 3)
   (setq-default standard-indent 3)

   (setq scroll-step                    1
         scroll-margin                  9
         scroll-conservatively          10000
         mouse-wheel-scroll-amount      '(1 ((shift) . 1))
         mouse-whell-progressive-speed  nil
         mouse-whell-follow-mouse       't
         version-control                t
         vc-make-backup-files           t
         vc-follow-symlinks             t
         coding-system-for-read         'utf-8
         coding-system-for-write        'utf-8
         sentence-end-double-space      nil
         tab-always-insert              'complete ;; does not apply for the most part b/c company
         auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))
         backup-directory-alist         `(("." . "~/.emacs.d/backups"))
         delete-old-versions            -1)

   (show-paren-mode 1)

   (modify-syntax-entry ?_ "w")
   #+END_SRC

*** Tab-character highlighting
    #+BEGIN_SRC emacs-lisp
    (defface whitespace-indent-face
      '((t (:background "color-236")))
      "Highlights non-space indentation")

    (defvar computed-indent-chars
      '(("\t" . 'whitespace-indent-face)))

    (add-hook 'fortran-mode-hook
              (lambda () (font-lock-add-keywords nil computed-indent-chars)))
    #+END_SRC

** Keybindings

   #+BEGIN_SRC emacs-lisp
   (use-package which-key :config (which-key-mode 1))
   ;; enhanced defaults and things that should have better bindings
   (general-define-key
    ;; these take inspiration from my Vim movement keys for minimak-12
    "C-n"     'next-line
    "C-e"     'previous-line
    "C-S-n"   'scroll-down
    "C-S-e"   'scroll-up
    ;; why does this have such a stupid default binding
    "M-S-k"   'backward-kill-sexp
    ;; prefer regexp isearch
    "C-s"     'isearch-forward-regexp
    "C-M-s"   'isearch-backward-regexp
    ;; replace some builtin interactives with better alternatives
    "M-x"     'counsel-M-x
    "C-h f"   'counsel-describe-function
    "C-h v"   'counsel-describe-variable
    "C-x C-f" 'counsel-find-file
    ;; who uses the buffer list? fucking nuisance
    "C-x C-b" 'ivy-switch-buffer
    ;; region stuff
    "C-x r a" 'align
    ;; closing files opened by request, etc...
    "C-c C-c" 'server-edit
    ;; elecom huge buttons - may need to make machine-specific
    "<mouse-8>" 'scroll-up-command
    "<mouse-9>" 'scroll-down-command)

   (general-define-key
    :keymaps '(paredit-mode-map emacs-lisp-mode)
    "C-(" 'backward-sexp
    "C-)" 'forward-sexp)

   (use-package ryo-modal
     :bind ("C-," . ryo-modal-mode)
     :config
     (mapc (lambda (n)
           (ryo-modal-key (number-to-string n) 'digit-argument))
           '(1 2 3 4 5 6 7 8 9 0))
     (ryo-modal-keys
      ;; exit modal mode
      ("q" ryo-modal-mode)
      ("n" backward-char)
      ("e" previous-line)
      ("o" next-line)
      ("p" forward-char)
      ("g" avy-goto-line)
      ("S-g" avy-goto-end-of-line)))

   (use-package avy
     :bind
     ("C-c f"   . avy-goto-char-timer)
     ("C-c g"   . avy-goto-line)
     ("C-c S-g" . avy-goto-end-of-line))

   (use-package hydra
     :config
     (global-set-key
      (kbd "C-x g")
      (defhydra magit-hydra (global-map "C-x C-g" :exit t)
        "Git Operations"
        ("c c" magit-commit-create    "Commit staged files" :color blue)
        ("c a" magit-commit-amend     "Amend commit" :color blue)
        ("c e" magit-commit-extend    "Extend commit" :color blue)
        ("a"   magit-stage            "Stage")
        ("r"   magit-unstage-file     "Unstage specific file")
        ("R"   magit-unstage-all      "Unstage all staged files")
        ("d d" magit-diff-unstaged    "Show unstaged changes")
        ("d s" magit-diff-staged      "Show staged changes")
        ("d f" magit-diff-buffer-file "Show changes to file at point")
        ("s"   magit-status           "Show repository status")
        ("p"   magit-push-to-remote   "Push active ref to remote")
        ("P"   magit-push-refspecs    "Push specific refs to remote")
        ("l"   magit-log              "Read log")
        ("L"   magit-log-buffer-file  "Read log for file at point")
        ("b"   magit-blame            "Start blaming")))
     (global-set-key
      (kbd "C-x w")
      (defhydra window-hydra (global-map "C-x w")
        ("w" winum-select-window-by-number "Select window number" :column "Mangement")
        ("d" rh--kill-winum                "Kill window number")
        ("q" delete-window                 "Kill active window" :color blue)
        ("|" split-window-right            "Split Right" :column "Layout")
        ("-" split-window-below            "Split Below")
        ("1" winum-select-window-1         "Window 1" :color blue :column "Select")
        ("2" winum-select-window-2         nil :color blue)
        ("3" winum-select-window-3         nil :color blue)
        ("4" winum-select-window-4         nil :color blue)
        ("5" winum-select-window-5         nil :color blue)
        ("6" winum-select-window-6         nil :color blue)
        ("7" winum-select-window-7         nil :color blue)
        ("8" winum-select-window-8         nil :color blue)
        ("9" winum-select-window-9         nil :color blue)
        ("0" winum-select-window-0-or-10   "Window 10" :color blue)
        ("h" windmove-left                 "Move Left")
        ("n" windmove-up                   "Move Up")
        ("e" windmove-down                 "Move Down")
        ("o" windmove-right                "Move Right"))))

   ;; elisp editing stuff
   (general-define-key
    :keymaps 'emacs-lisp-mode-map
    :major-modes t
    "C-x m e" 'macrostep-expand
    "C-x m c" 'macrostep-collapse
    "C-x m n" 'macrostep-next-macro
    "C-x m p" 'macrostep-prev-macro)

   (general-define-key
    :keymaps 'org-mode-map
    "C-<tab>" 'org-indent-line)
    #+END_SRC

** Control Pedal
   Allows for the use of my PTT pedal as ~~C-~~ in keybindings, but only when I have it enabled.
   #+BEGIN_SRC emacs-lisp
   ;; can't do this as a minor mode because you'll end up doing all the
   ;; work to modify key-translation-map anyways

   (defvar rh/pedal-keysym
     "<XF86Phone>")

   (defvar rh/pedal-key
     (kbd rh/pedal-keysym)
     "Pedal key")

   (defvar rh/pedal-key-enabled
     nil
     "Is pedal treated as sticky meta?")

   (defun rh/toggle-pedal ()
     "Allow <XF86Phone> to translate to a control modifier"
     (interactive)
     (setq rh/pedal-key-enabled
           (let ((enabled (lookup-key key-translation-map rh/pedal-key)))
             (if enabled
                 (define-key key-translation-map rh/pedal-key nil)
               (define-key key-translation-map rh/pedal-key 'event-apply-meta-modifier))
             (message "Pedal %s" (if enabled
                                     "disabled"
                                   "enabled"))
             (not enabled))))

   (general-define-key
    "<f13>" 'rh/toggle-pedal)
    #+END_SRC

*** Tetris
    #+BEGIN_SRC emacs-lisp
    (general-define-key
     :keymaps 'tetris-mode-map
     "a" 'tetris-move-left
     "t" 'tetris-move-right
     "s" 'tetris-move-down
     "l" 'tetris-rotate-next
     "e" 'tetris-rotate-prev
     "p" 'tetris-pause)
     #+END_SRC
